# .zshrc is sourced in interactive shells.
# It should contain commands to set up aliases, functions, options, key bindings, etc.
# https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
# https://www.youtube.com/watch?v=MSPu-lYF-A8

# Initialize Starship prompt (works in all terminals)
if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

# History configuration - preserve your command history!
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

# History options
setopt appendhistory          # Append to history file, don't overwrite
setopt sharehistory          # Share history between all sessions
setopt incappendhistory      # Add commands to history immediately
setopt histignoredups        # Don't record duplicate entries
setopt histignorespace       # Don't record commands that start with space
setopt histverify            # Show command with history expansion before running
setopt extendedhistory       # Save timestamp and duration

# some useful options (man zshoptions)
setopt autocd extendedglob nomatch menucomplete
setopt interactive_comments

# beeping is annoying
unsetopt BEEP


# # completions
# autoload -Uz compinit
# zstyle ':completion:*' menu select
# # zstyle ':completion::complete:lsof:*' menu yes select
# zmodload zsh/complist
# # compinit
# _comp_options+=(globdots)		# Include hidden files.

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# No theme needed - starship handles the prompt
ZSH_THEME=""

# FZF configurations - Enhanced fuzzy finding
export FZF_DEFAULT_OPTS='
  --height 40% 
  --layout=reverse 
  --border 
  --preview-window=right:60%:wrap
  --bind ctrl-u:preview-page-up,ctrl-d:preview-page-down
  --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9
  --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9
  --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6
  --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4'

# Use fd for FZF (faster than find)
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

# FZF preview commands
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

# FZF-tab configurations
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always --icons $realpath'
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

# Which plugins would you like to load? (plugins can be found in ~/.dotfiles/oh-my-zsh/plugins/*)
plugins=(
  # Core productivity plugins
  1password               # 1Password CLI integration
  aliases                 # Alias management
  brew                    # Homebrew aliases and completions
  colored-man-pages       # Colorized man pages
  command-not-found       # Suggests packages for missing commands
  common-aliases          # Common useful aliases
  
  # Clipboard and file operations
  copybuffer              # Copy current command line to clipboard
  copyfile                # Copy file contents to clipboard
  copypath                # Copy current path to clipboard
  cp                      # Enhanced cp with progress (cpv function)
  extract                 # Universal archive extractor (x command)
  
  # Directory and navigation
  dirhistory              # Navigate directory history with Alt+arrows
  dirpersist              # Restore directory stack between sessions
  pj                      # Project jump - quick project navigation
  z                       # Smart directory jumping (until zoxide fully replaces)
  
  # Development tools
  docker                  # Docker aliases and completions
  docker-compose          # Docker Compose aliases
  dotenv                  # Auto-load .env files
  gh                      # GitHub CLI completions
  git                     # Git aliases and completions
  jsontools               # JSON manipulation tools
  kubectl                 # Kubernetes aliases and completions
  node                    # Node.js completions
  npm                     # NPM completions and aliases
  pip                     # Python pip completions
  python                  # Python completions
  yarn                    # Yarn completions and aliases
  vscode                  # VS Code integration
  
  # Search and fuzzy finding
  fzf                     # Fuzzy finder integration
  fzf-tab                 # Replace tab completion with fzf
  history-substring-search # Search history with up/down arrows
  web-search              # Search web from command line
  
  # System and utilities
  emoji                   # Emoji completion
  macos                   # macOS-specific aliases and functions
  safe-paste              # Safe pasting of multi-line commands
  sudo                    # Sudo aliases and completions
  
  # Enhanced shell experience (keep these last)
  zsh-autosuggestions     # Fish-like autosuggestions
  zsh-syntax-highlighting # Fish-like syntax highlighting
)


# Mise (modern replacement for asdf)
if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"
fi

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Load functions and aliases after oh-my-zsh
source "$ZDOTDIR/zsh-functions"
zsh_add_file "zsh-aliases"

# Load direnv if available
if command -v direnv &> /dev/null; then
  eval "$(direnv hook zsh)"
fi

# Normal files to source
# zsh_add_file "zsh-exports"
# zsh_add_file "zsh-prompt"

# Plugins
# zsh_add_plugin "kiurchv/asdf.plugin.zsh"
# zsh_add_plugin "olets/zsh-abbr"
# zsh_add_plugin "romkatv/powerlevel10k"
# zsh_add_plugin "unixorn/fzf-zsh-plugin"
# zsh_add_plugin "zsh-users/zsh-autosuggestions"
# zsh_add_plugin "zsh-users/zsh-syntax-highlighting"
# zsh_add_completion "esc/conda-zsh-completion" false
# For more plugins: https://github.com/unixorn/awesome-zsh-plugins
# More completions https://github.com/zsh-users/zsh-completions


# # Enable the completion system
# autoload compinit

# # Initialize all completions on $fpath and ignore (-i) all insecure files and directories
# compinit -i

# Define key bindings.
# z4h bindkey z4h-cd-back    Shift+Left   # cd into the previous directory
# z4h bindkey z4h-cd-forward Shift+Right  # cd into the next directory
# z4h bindkey z4h-cd-up      Shift+Up     # cd into the parent directory
# z4h bindkey z4h-cd-down    Shift+Down   # cd into a child directory

# Autoload functions.
# autoload -Uz zmv

# Add flags to existing aliases.
alias ls="${aliases[ls]:-ls} -A"

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
# Awesome cd movements from zshkit
setopt autocd autopushd pushdminus pushdsilent pushdtohome cdablevars
DIRSTACKSIZE=5

# Shell options
ulimit -n 8192
unsetopt nomatch
setopt auto_cd
setopt extendedglob  # enable extended globbing
setopt glob_dots     # no special treatment for file names with a leading dot
setopt interactive_comments
setopt no_auto_menu  # require an extra TAB press to open the completion menu

# Zoxide - Smart directory jumping
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh)"
fi

# Hybrid history setup - best of both worlds!
if command -v atuin &> /dev/null; then
  # Initialize atuin but don't bind to up arrow by default
  eval "$(atuin init zsh --disable-up-arrow)"
  
  # Atuin keybindings for advanced search:
  # Ctrl+R - Atuin's fuzzy search with app context
  # Ctrl+S - Atuin's session-based search
  bindkey '^r' _atuin_search_widget
fi

# Traditional history search with up/down arrows (familiar behavior)
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search    # Up arrow - traditional
bindkey "^[[B" down-line-or-beginning-search  # Down arrow - traditional

# FZF keybindings - Enhanced directory navigation
# Note: FZF widgets are loaded by Oh My Zsh fzf plugin
bindkey "^[c" fzf-cd-widget                    # Alt+C for directory search
bindkey "^T" fzf-file-widget                   # Ctrl+T for file search

# pnpm
export PNPM_HOME="{{ .chezmoi.homeDir }}/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# pnpm shell completion
if [ -f "/opt/homebrew/share/zsh/site-functions/_pnpm" ]; then
  source "/opt/homebrew/share/zsh/site-functions/_pnpm"
fi

# Terminal-specific integrations
if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
  # Load iTerm2 shell integration only when using iTerm2
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi

# Ensure /opt/homebrew/bin is prioritized over /usr/local/bin
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"

# Add Docker CLI to PATH (Docker Desktop)
export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
